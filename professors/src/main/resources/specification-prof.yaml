openapi: 3.0.3
info:
  title: Open API die Frage
  description: professor's urls
  version: 1.0.0
servers:
  - url: 'http://localhost:8030'
  - url: 'http://localhost:8787'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
        firsName:
          type: string
        lastName:
          type: string
        patronymic:
          type: string
        email:
          type: string
        password:
          type: string

paths:
  /api/professor/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - "Professor Controller"
      summary: get info about one professor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Bad Request
          content:
            application/json:
              examples:
                USER_NOT_FOUND:
                  summary: User not found
                  value:
                    code: USER_NOT_FOUND
                    status: 404
                    message: User not found
  /api/professor/by_email/{email}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - "Professor Controller"
      summary: get info about one professor
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Bad Request
          content:
            application/json:
              examples:
                USER_NOT_FOUND:
                  summary: User not found
                  value:
                    code: USER_NOT_FOUND
                    status: 404
                    message: User not found
  /api/professor/credentials/{id}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - "Professor Controller"
      summary: professor update's credentials
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: firstName
          required: true
          schema:
            type: string
          description: new name
        - in: query
          name: lastName
          required: true
          schema:
            type: string
          description: new surname
        - in: query
          name: patronymic
          required: false
          schema:
            type: string
          description: new second name
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: new email
        - in: query
          name: password
          required: true
          schema:
            type: string
          description: new password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Bad Request
          content:
            application/json:
              examples:
                USER_NOT_FOUND:
                  summary: User not found
                  value:
                    code: USER_NOT_FOUND
                    status: 404
                    message: User not found
        '409':
          description: Bad Request
          content:
            application/json:
              examples:
                USER_NOT_FOUND:
                  summary: User already exist
                  value:
                    code: USER_ALREADY_EXISTS
                    status: 409
                    message: User already exist
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                INVALID_NAME_FORMAT:
                  summary: Invalid name format
                  value:
                    code: INVALID_NAME_FORMAT
                    status: 400
                    message: Invalid name format
                INVALID_PASSWORD_FORMAT:
                  summary: Invalid password format
                  value:
                    code: INVALID_PASSWORD_FORMAT
                    status: 400
                    message: Invalid password format
                INVALID_EMAIL_FORMAT:
                  summary: Invalid email format
                  value:
                    code: INVALID_EMAIL_FORMAT
                    status: 400
                    message: Invalid email format
  /api/professor/delete/{id}:
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - "Professor Controller"
      summary: delete professor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Bad Request
          content:
            application/json:
              examples:
                USER_NOT_FOUND:
                  summary: User not found
                  value:
                    code: USER_NOT_FOUND
                    status: 404
                    message: User not found
